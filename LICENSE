<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Android to iPhone 16 Screenshot</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.3.0/fabric.min.js"></script>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    body {
      -webkit-user-select: none;
         -moz-user-select: none;
          -ms-user-select: none;
              user-select: none;
      background: #111827;
      color: white;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      margin: 0;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 1rem;
    }
    canvas {
      max-width: 100%;
      height: auto;
      border-radius: 1.5rem;
      box-shadow: 0 0 15px rgba(0,0,0,0.8);
    }
    .drop-zone {
      border: 2px dashed #4f46e5;
      border-radius: 0.75rem;
      padding: 2rem;
      text-align: center;
      cursor: pointer;
      transition: background 0.3s;
      max-width: 320px;
      width: 100%;
      margin-bottom: 1rem;
      user-select: none;
    }
    .drop-zone.dragover {
      background: rgba(79, 70, 229, 0.15);
    }
    #beforeAfter {
      max-width: 400px;
      margin-top: 2rem;
      user-select: none;
    }
    #beforeAfter img {
      width: 100%;
      display: block;
      position: absolute;
      top: 0;
      left: 0;
      border-radius: 1.5rem;
      user-select: none;
      pointer-events: none;
    }
    #beforeAfter .container {
      position: relative;
      width: 100%;
      padding-top: calc(2532 / 1170 * 100%);
      overflow: hidden;
      border-radius: 1.5rem;
      box-shadow: 0 0 15px rgba(0,0,0,0.8);
    }
    #slider {
      width: 100%;
      margin-top: 0.5rem;
      -webkit-appearance: none;
      background: transparent;
    }
    #slider::-webkit-slider-thumb {
      -webkit-appearance: none;
      appearance: none;
      width: 24px;
      height: 24px;
      background: #4f46e5;
      cursor: pointer;
      border-radius: 50%;
      border: 2px solid white;
      margin-top: -10px;
    }
    #slider::-moz-range-thumb {
      width: 24px;
      height: 24px;
      background: #4f46e5;
      cursor: pointer;
      border-radius: 50%;
      border: 2px solid white;
    }
  </style>
</head>
<body>
  <h1 class="text-3xl font-bold mb-6 text-center">Make Android Screenshot Look Like iPhone 16</h1>

  <div id="dropZone" class="drop-zone" tabindex="0" role="button" aria-label="Upload screenshot by click or drag and drop">
    <p>Drag & Drop or Click to Upload Screenshot</p>
    <input type="file" id="upload" accept="image/*" class="hidden" />
  </div>

  <canvas id="canvas" width="1170" height="2532" class="hidden"></canvas>

  <a id="downloadBtn" href="#" class="mt-4 hidden bg-green-600 hover:bg-green-700 px-4 py-2 rounded text-white font-semibold" download="iphone_screenshot.png">Download iPhone Screenshot</a>

  <p class="text-sm text-gray-400 mt-2 text-center max-w-xs">Includes iOS 18-style status bar, dynamic island, and multiple iPhone 16 frame styles</p>

  <div class="mt-6 text-sm text-gray-300">
    <label for="frameSelect">Choose iPhone Frame:</label>
    <select id="frameSelect" class="bg-gray-800 text-white border border-gray-600 rounded px-2 py-1 ml-2">
      <option value="spaceblack">Space Black</option>
      <option value="starlight">Starlight</option>
      <option value="deepblue">Deep Blue</option>
    </select>
  </div>

  <div id="beforeAfter" class="hidden mt-10">
    <h2 class="text-center text-white mb-2">Before / After</h2>
    <input type="range" id="slider" min="0" max="100" value="50" aria-label="Before after slider" />
    <div class="container" style="position:relative;">
      <img id="beforeImg" alt="Original screenshot" style="clip-path: inset(0 50% 0 0); position: absolute; top: 0; left: 0;"/>
      <img id="afterImg" alt="iPhone 16 styled screenshot" />
    </div>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.3.0/fabric.min.js"></script>
  <script>
    const uploadInput = document.getElementById('upload');
    const dropZone = document.getElementById('dropZone');
    const canvas = new fabric.Canvas('canvas');
    const canvasElement = document.getElementById('canvas');
    const downloadBtn = document.getElementById('downloadBtn');
    const frameSelect = document.getElementById('frameSelect');
    const beforeAfter = document.getElementById('beforeAfter');
    const slider = document.getElementById('slider');
    const beforeImg = document.getElementById('beforeImg');
    const afterImg = document.getElementById('afterImg');

    const iphoneStatusBarSrc = 'https://i.imgur.com/tH6zSGL.png';
    const dynamicIslandSrc = 'https://i.imgur.com/yG7DwL4.png';
    const iphoneFramesSrc = {
      spaceblack: 'https://i.imgur.com/D2SUpDR.png',
      starlight: 'https://i.imgur.com/kX3EyUO.png',
      deepblue: 'https://i.imgur.com/91Iq5WR.png'
    };

    const iphoneStatusBar = new Image();
    const dynamicIsland = new Image();
    const iphoneFrames = {
      spaceblack: new Image(),
      starlight: new Image(),
      deepblue: new Image(),
    };

    iphoneStatusBar.src = iphoneStatusBarSrc;
    dynamicIsland.src = dynamicIslandSrc;
    iphoneFrames.spaceblack.src = iphoneFramesSrc.spaceblack;
    iphoneFrames.starlight.src = iphoneFramesSrc.starlight;
    iphoneFrames.deepblue.src = iphoneFramesSrc.deepblue;

    let assetsLoaded = 0;
    function checkAllLoaded() {
      assetsLoaded++;
      if (assetsLoaded === 5) {
        initUpload();
      }
    }

    iphoneStatusBar.onload = checkAllLoaded;
    dynamicIsland.onload = checkAllLoaded;
    iphoneFrames.spaceblack.onload = checkAllLoaded;
    iphoneFrames.starlight.onload = checkAllLoaded;
    iphoneFrames.deepblue.onload = checkAllLoaded;

    function initUpload() {
      function handleFile(file) {
        if (!file || !file.type.startsWith('image/')) {
          alert('Please upload a valid image file.');
          return;
        }
        const reader = new FileReader();
        reader.onload = (event) => {
          beforeImg.src = event.target.result;
          fabric.Image.fromURL(event.target.result, (img) => {
            canvas.clear();
            img.scaleToWidth(1170);
            img.set({ top: 180, left: 0 });
            canvas.setBackgroundColor('#000', canvas.renderAll.bind(canvas));
            canvas.add(img);

            const statusBarImg = new fabric.Image(iphoneStatusBar, {
              left: 0,
              top: 0,
              selectable: false,
              evented: false,
              scaleX: 1170 / iphoneStatusBar.width,
              scaleY: 120 / iphoneStatusBar.height,
            });
            canvas.add(statusBarImg);

            const island = new fabric.Image(dynamicIsland, {
              left: (1170 - 250) / 2,
              top: 130,
              width: 250,
              height: 40,
              selectable: false,
              evented: false,
            });
            canvas.add(island);

            addFrame();

            canvasElement.classList.remove('hidden');
            downloadBtn.classList.remove('hidden');

            setTimeout(() => {
              afterImg.src = canvas.toDataURL();
              beforeAfter.classList.remove('hidden');
            }, 300);
          });
        };
        reader.readAsDataURL(file);
      }

      uploadInput.addEventListener('change', (e) => {
        handleFile(e.target.files[0]);
      });

      dropZone.addEventListener('click', () => uploadInput.click());

      dropZone.addEventListener('dragover', (e) => {
        e.preventDefault();
        dropZone.classList.add('dragover');
      });

      dropZone.addEventListener('dragleave', (e) => {
        e.preventDefault();
        dropZone.classList.remove('dragover');
      });

      dropZone.addEventListener('drop', (e) => {
        e.preventDefault();
        dropZone.classList.remove('dragover');
        const file = e.dataTransfer.files[0];
        if (!file) {
          alert('No file detected on drop.');
          return;
        }
        handleFile(file);
      });
    }

    function addFrame() {
      const frameType = frameSelect.value;
      const frameImage = iphoneFrames[frameType];

      const objects = canvas.getObjects();
      if (objects.length > 3) canvas.remove(objects[objects.length - 1]);

      const frame = new fabric.Image(frameImage, {
        left: 0,
        top: 0,
        scaleX: 1170 / frameImage.width,
        scaleY: 2532 / frameImage.height,
        selectable: false,
        evented: false,
      });
      canvas.add(frame);
    }

    frameSelect.addEventListener('change', () => {
      if (!canvas.getObjects().length) return;
      addFrame();
    });

    downloadBtn.addEventListener('click', () => {
      const dataURL = canvas.toDataURL({ format: 'png' });
      downloadBtn.href = dataURL;
    });

    slider.addEventListener('input', () => {
      beforeImg.style.clipPath = `inset(0 ${100 - slider.value}% 0 0)`;
    });
  </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Android to iPhone 16 Screenshot</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.3.0/fabric.min.js"></script>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    body {
      -webkit-user-select: none;
         -moz-user-select: none;
          -ms-user-select: none;
              user-select: none;
      background: #111827;
      color: white;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      margin: 0;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 1rem;
    }
    canvas {
      max-width: 100%;
      height: auto;
      border-radius: 1.5rem;
      box-shadow: 0 0 15px rgba(0,0,0,0.8);
    }
    .drop-zone {
      border: 2px dashed #4f46e5;
      border-radius: 0.75rem;
      padding: 2rem;
      text-align: center;
      cursor: pointer;
      transition: background 0.3s;
      max-width: 320px;
      width: 100%;
      margin-bottom: 1rem;
      user-select: none;
    }
    .drop-zone.dragover {
      background: rgba(79, 70, 229, 0.15);
    }
    #beforeAfter {
      max-width: 400px;
      margin-top: 2rem;
      user-select: none;
    }
    #beforeAfter img {
      width: 100%;
      display: block;
      position: absolute;
      top: 0;
      left: 0;
      border-radius: 1.5rem;
      user-select: none;
      pointer-events: none;
    }
    #beforeAfter .container {
      position: relative;
      width: 100%;
      padding-top: calc(2532 / 1170 * 100%);
      overflow: hidden;
      border-radius: 1.5rem;
      box-shadow: 0 0 15px rgba(0,0,0,0.8);
    }
    #slider {
      width: 100%;
      margin-top: 0.5rem;
      -webkit-appearance: none;
      background: transparent;
    }
    #slider::-webkit-slider-thumb {
      -webkit-appearance: none;
      appearance: none;
      width: 24px;
      height: 24px;
      background: #4f46e5;
      cursor: pointer;
      border-radius: 50%;
      border: 2px solid white;
      margin-top: -10px;
    }
    #slider::-moz-range-thumb {
      width: 24px;
      height: 24px;
      background: #4f46e5;
      cursor: pointer;
      border-radius: 50%;
      border: 2px solid white;
    }
  </style>
</head>
<body>
  <h1 class="text-3xl font-bold mb-6 text-center">Make Android Screenshot Look Like iPhone 16</h1>

  <div id="dropZone" class="drop-zone" tabindex="0" role="button" aria-label="Upload screenshot by click or drag and drop">
    <p>Drag & Drop or Click to Upload Screenshot</p>
    <input type="file" id="upload" accept="image/*" class="hidden" />
  </div>

  <canvas id="canvas" width="1170" height="2532" class="hidden"></canvas>

  <a id="downloadBtn" href="#" class="mt-4 hidden bg-green-600 hover:bg-green-700 px-4 py-2 rounded text-white font-semibold" download="iphone_screenshot.png">Download iPhone Screenshot</a>

  <p class="text-sm text-gray-400 mt-2 text-center max-w-xs">Includes iOS 18-style status bar, dynamic island, and multiple iPhone 16 frame styles</p>

  <div class="mt-6 text-sm text-gray-300">
    <label for="frameSelect">Choose iPhone Frame:</label>
    <select id="frameSelect" class="bg-gray-800 text-white border border-gray-600 rounded px-2 py-1 ml-2">
      <option value="spaceblack">Space Black</option>
      <option value="starlight">Starlight</option>
      <option value="deepblue">Deep Blue</option>
    </select>
  </div>

  <div id="beforeAfter" class="hidden mt-10">
    <h2 class="text-center text-white mb-2">Before / After</h2>
    <input type="range" id="slider" min="0" max="100" value="50" aria-label="Before after slider" />
    <div class="container" style="position:relative;">
      <img id="beforeImg" alt="Original screenshot" style="clip-path: inset(0 50% 0 0); position: absolute; top: 0; left: 0;"/>
      <img id="afterImg" alt="iPhone 16 styled screenshot" />
    </div>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.3.0/fabric.min.js"></script>
  <script>
    const uploadInput = document.getElementById('upload');
    const dropZone = document.getElementById('dropZone');
    const canvas = new fabric.Canvas('canvas');
    const canvasElement = document.getElementById('canvas');
    const downloadBtn = document.getElementById('downloadBtn');
    const frameSelect = document.getElementById('frameSelect');
    const beforeAfter = document.getElementById('beforeAfter');
    const slider = document.getElementById('slider');
    const beforeImg = document.getElementById('beforeImg');
    const afterImg = document.getElementById('afterImg');

    const iphoneStatusBarSrc = 'https://i.imgur.com/tH6zSGL.png';
    const dynamicIslandSrc = 'https://i.imgur.com/yG7DwL4.png';
    const iphoneFramesSrc = {
      spaceblack: 'https://i.imgur.com/D2SUpDR.png',
      starlight: 'https://i.imgur.com/kX3EyUO.png',
      deepblue: 'https://i.imgur.com/91Iq5WR.png'
    };

    const iphoneStatusBar = new Image();
    const dynamicIsland = new Image();
    const iphoneFrames = {
      spaceblack: new Image(),
      starlight: new Image(),
      deepblue: new Image(),
    };

    iphoneStatusBar.src = iphoneStatusBarSrc;
    dynamicIsland.src = dynamicIslandSrc;
    iphoneFrames.spaceblack.src = iphoneFramesSrc.spaceblack;
    iphoneFrames.starlight.src = iphoneFramesSrc.starlight;
    iphoneFrames.deepblue.src = iphoneFramesSrc.deepblue;

    let assetsLoaded = 0;
    function checkAllLoaded() {
      assetsLoaded++;
      if (assetsLoaded === 5) {
        initUpload();
      }
    }

    iphoneStatusBar.onload = checkAllLoaded;
    dynamicIsland.onload = checkAllLoaded;
    iphoneFrames.spaceblack.onload = checkAllLoaded;
    iphoneFrames.starlight.onload = checkAllLoaded;
    iphoneFrames.deepblue.onload = checkAllLoaded;

    function initUpload() {
      function handleFile(file) {
        if (!file || !file.type.startsWith('image/')) {
          alert('Please upload a valid image file.');
          return;
        }
        const reader = new FileReader();
        reader.onload = (event) => {
          beforeImg.src = event.target.result;
          fabric.Image.fromURL(event.target.result, (img) => {
            canvas.clear();
            img.scaleToWidth(1170);
            img.set({ top: 180, left: 0 });
            canvas.setBackgroundColor('#000', canvas.renderAll.bind(canvas));
            canvas.add(img);

            const statusBarImg = new fabric.Image(iphoneStatusBar, {
              left: 0,
              top: 0,
              selectable: false,
              evented: false,
              scaleX: 1170 / iphoneStatusBar.width,
              scaleY: 120 / iphoneStatusBar.height,
            });
            canvas.add(statusBarImg);

            const island = new fabric.Image(dynamicIsland, {
              left: (1170 - 250) / 2,
              top: 130,
              width: 250,
              height: 40,
              selectable: false,
              evented: false,
            });
            canvas.add(island);

            addFrame();

            canvasElement.classList.remove('hidden');
            downloadBtn.classList.remove('hidden');

            setTimeout(() => {
              afterImg.src = canvas.toDataURL();
              beforeAfter.classList.remove('hidden');
            }, 300);
          });
        };
        reader.readAsDataURL(file);
      }

      uploadInput.addEventListener('change', (e) => {
        handleFile(e.target.files[0]);
      });

      dropZone.addEventListener('click', () => uploadInput.click());

      dropZone.addEventListener('dragover', (e) => {
        e.preventDefault();
        dropZone.classList.add('dragover');
      });

      dropZone.addEventListener('dragleave', (e) => {
        e.preventDefault();
        dropZone.classList.remove('dragover');
      });

      dropZone.addEventListener('drop', (e) => {
        e.preventDefault();
        dropZone.classList.remove('dragover');
        const file = e.dataTransfer.files[0];
        if (!file) {
          alert('No file detected on drop.');
          return;
        }
        handleFile(file);
      });
    }

    function addFrame() {
      const frameType = frameSelect.value;
      const frameImage = iphoneFrames[frameType];

      const objects = canvas.getObjects();
      if (objects.length > 3) canvas.remove(objects[objects.length - 1]);

      const frame = new fabric.Image(frameImage, {
        left: 0,
        top: 0,
        scaleX: 1170 / frameImage.width,
        scaleY: 2532 / frameImage.height,
        selectable: false,
        evented: false,
      });
      canvas.add(frame);
    }

    frameSelect.addEventListener('change', () => {
      if (!canvas.getObjects().length) return;
      addFrame();
    });

    downloadBtn.addEventListener('click', () => {
      const dataURL = canvas.toDataURL({ format: 'png' });
      downloadBtn.href = dataURL;
    });

    slider.addEventListener('input', () => {
      beforeImg.style.clipPath = `inset(0 ${100 - slider.value}% 0 0)`;
    });
  </script>
</body>
</html>
